import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.23'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}

version = project.mod_version
group = project.maven_group
archivesBaseName = project.archives_base_name

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(17))
        // Azul covers the most platforms for Java 8+ toolchains, crucially including MacOS arm64
        vendor.set(JvmVendorSpec.AZUL)
    }
    withSourcesJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'

    // java 17 syntax
    if (it.name in ['compileMcLauncherJava', 'compilePatchedMcJava']) {
        return
    }

    sourceCompatibility = 17
    options.release.set(8)

    javaCompiler.set(javaToolchains.compilerFor {
        languageVersion.set(JavaLanguageVersion.of(17))
        vendor.set(JvmVendorSpec.AZUL)
    })
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

minecraft {
    mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'

    // Set username here, the UUID will be looked up automatically
    username = 'Developer'

    // Add any additional tweaker classes here
    // extraTweakClasses.add('org.spongepowered.asm.launch.MixinTweaker')

    // Add various JVM arguments here for runtime
    def args = ["-ea:${project.group}"]
    if (project.use_coremod.toBoolean()) {
        args << '-Dfml.coreMods.load=' + coremod_plugin_class_name
    }
    if (project.use_mixins.toBoolean()) {
        args << '-Dmixin.hotSwap=true'
        args << '-Dmixin.checks.interfaces=true'
        args << '-Dmixin.debug.export=true'
    }
    extraRunJvmArguments.addAll(args)

    useDependencyAccessTransformers = true

    // Add any properties you want to swap out for a dynamic value at build time here
    // Any properties here will be added to a class at build time, the name can be configured below
    injectedTags.put("VERSION", project.version)
    injectedTags.put("ID", project.archives_base_name)
}

// Generate a group.archives_base_name.Tags class
tasks.injectTags.configure {
    // Change Tags class' name here:
    outputClassName.set("${project.group}.${project.archives_base_name}.Version")
}

repositories {
    maven {
        name 'CleanroomMC Maven'
        url 'https://maven.cleanroommc.com'
    }
    maven {
        name 'SpongePowered Maven'
        url 'https://repo.spongepowered.org/maven'
    }
    maven {
        name 'CurseMaven'
        url 'https://cursemaven.com'
        content {
            includeGroup 'curse.maven'
        }
    }
    maven {
        url 'https://dvs1.progwml6.com/files/maven/'
    }
    mavenLocal() // Must be last for caching to work
}

dependencies {
    compileOnly 'org.jetbrains:annotations:24.0.1'
    implementation 'zone.rong:mixinbooter:8.3'

    // Change your mixin refmap name here:
    String mixin = modUtils.enableMixins('org.spongepowered:mixin:0.8.3', "mixins.${project.archives_base_name}.refmap.json")
    api(mixin) {
        transitive = false
    }
    annotationProcessor('org.ow2.asm:asm-debug-all:5.2')
    annotationProcessor('com.google.guava:guava:24.1.1-jre')
    annotationProcessor('com.google.code.gson:gson:2.8.6')
    annotationProcessor(mixin) { transitive = false }

    // jabel
    annotationProcessor 'com.github.bsideup.jabel:jabel-javac-plugin:1.0.0'
    compileOnly('com.github.bsideup.jabel:jabel-javac-plugin:1.0.0') {
        transitive = false
    }
    // workaround for https://github.com/bsideup/jabel/issues/174
    annotationProcessor 'net.java.dev.jna:jna-platform:5.13.0'
    // Allow jdk.unsupported classes like sun.misc.Unsafe, workaround for JDK-8206937 and fixes Forge crashes in tests.
    patchedMinecraft 'me.eigenraven.java8unsupported:java-8-unsupported-shim:1.0.0'

    // allow Jabel to work in tests
    testAnnotationProcessor "com.github.bsideup.jabel:jabel-javac-plugin:1.0.0"
    testCompileOnly("com.github.bsideup.jabel:jabel-javac-plugin:1.0.0") {
        transitive = false // We only care about the 1 annotation class
    }
    testCompileOnly "me.eigenraven.java8unsupported:java-8-unsupported-shim:1.0.0"
    // jabel end

    // Example deobf dependency
    // compileOnly rfg.deobf("curse.maven:endercore-231868:2972849:")

    // Hard deps
    implementation rfg.deobf("curse.maven:chameleon-230497:${chameleon_file_id}")

    // Soft deps (JEI and TOP can be automatically added, but we do it this way to add the debug option)
    implementation rfg.deobf("curse.maven:jei-238222:${jei_file_id}")

    if (project.debug_thaumcraft.toBoolean()) {
        // Thaumcraft needs baubles as dep
        runtimeOnly rfg.deobf("curse.maven:baubles-227083:${baubles_file_id}")
        implementation rfg.deobf("curse.maven:thaumcraft-223628:${thaumcraft_file_id}")
    } else {
        compileOnly rfg.deobf("curse.maven:thaumcraft-223628:${thaumcraft_file_id}")
    }
    if (project.debug_waila.toBoolean()) {
        implementation rfg.deobf("curse.maven:hwyla-253449:${hwyla_file_id}")
    } else {
        compileOnly rfg.deobf("curse.maven:hwyla-253449:${hwyla_file_id}")
    }
    if (project.debug_top.toBoolean()) {
        implementation rfg.deobf("curse.maven:the-one-probe-245211:${top_file_id}")
    } else {
        compileOnly rfg.deobf("curse.maven:the-one-probe-245211:${top_file_id}")
    }

    // Addons
    if (project.addon_framedcompactdrawers.toBoolean()) {
        runtimeOnly rfg.deobf("curse.maven:framed-compacting-drawers-376351:${framedcompactdrawers_file_id}")
    }
}

processResources {
    // This will ensure that this task is redone when the versions change
    inputs.property 'version', project.version
    inputs.property 'mcversion', project.minecraft.version

    // Replace various properties in mcmod.info and pack.mcmeta if applicable
    filesMatching(['mcmod.info', 'pack.mcmeta']) { fcd ->
        // Replace version and mcversion
        fcd.expand(
                'version': project.version,
                'mcversion': project.minecraft.version
        )
    }

    if (project.use_access_transformer.toBoolean()) {
        rename '(.+_at.cfg)', 'META-INF/$1' // Make sure Access Transformer files are in META-INF folder
    }
}

jar {
    manifest {
        def attribute_map = [:]
        attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
        attribute_map['FMLCorePluginContainsFMLMod'] = true
        attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider { configurations.embed.collect { it.isDirectory() ? it : zipTree(it) } })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}

tasks.named("processIdeaSettings").configure {
    dependsOn("injectTags")
}